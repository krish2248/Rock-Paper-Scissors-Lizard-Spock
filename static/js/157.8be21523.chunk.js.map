{"version":3,"file":"static/js/157.8be21523.chunk.js","mappings":"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","sources":["routes/online/game-play.component.tsx","routes/online/game-body.component.tsx","routes/online/game-status.styles.tsx","routes/online/game-status.component.tsx","routes/online/game-start.component.tsx","routes/online/room.styles.tsx","routes/online/room.component.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport icons from '../../data';\nimport { socket } from './room.component';\n\nimport Icon from '../../components/icon/icon.component';\nimport Button from '../../components/button/button.component';\n\nimport {\n\tincrement,\n\tdecrement,\n\tsetResultOut,\n\tsetWinnerText,\n\tsetDidWin,\n} from '../../redux/score/online-score.slice';\nimport { setGamePlay } from '../../redux/players/online-players.slice';\nimport {\n\tsetOpponentPickedMessage,\n\tsetOpponentRestartedMessage,\n} from '../../redux/status/opponent-status.slice';\n\nimport { GameResultContainer } from '../../styles/game-result.styles';\n\nimport {\n\tGamePlayContainer,\n\tPlayerContainer,\n\tPlayerIdentity,\n\tSecondPlayer,\n} from '../../styles/game-play.styles';\n\nconst OnlineGamePlay = (): JSX.Element => {\n\tconst { playerOneActive, playerChoice, opponent } = useAppSelector(state => state.onlinePlayers);\n\tconst { resultOut, winnerText, didWin } = useAppSelector(state => state.onlineScorer);\n\n\tconst dispatch = useAppDispatch();\n\n\tconst [firstPlayerData] = icons.filter(({ title }) => title === playerChoice);\n\tconst image = firstPlayerData?.image;\n\n\tconst [secondPlayerData] = icons.filter(({ title }) => title === opponent);\n\tconst opponentImage = secondPlayerData?.image;\n\n\tuseEffect(() => {\n\t\tsocket.on('result', data => {\n\t\t\tdispatch(setResultOut(true));\n\n\t\t\tconst { winner } = data;\n\n\t\t\tif ((winner === 'player1' && playerOneActive) || (winner === 'player2' && !playerOneActive)) {\n\t\t\t\tdispatch(setWinnerText(`you win`));\n\t\t\t\tdispatch(increment());\n\t\t\t\tdispatch(setDidWin(true));\n\t\t\t} else if (winner === 'player1' || winner === 'player2') {\n\t\t\t\tdispatch(setWinnerText(`you lose`));\n\t\t\t\tdispatch(decrement());\n\t\t\t} else {\n\t\t\t\tdispatch(setWinnerText(`draw`));\n\t\t\t}\n\t\t});\n\n\t\tdispatch(setOpponentRestartedMessage(''));\n\n\t\tsocket.on('restart-message', message => {\n\t\t\tdispatch(setOpponentRestartedMessage(message));\n\t\t});\n\n\t\treturn () => {\n\t\t\tsocket.off('result');\n\t\t\tsocket.off('restart-message');\n\t\t};\n\t}, [resultOut]);\n\n\tconst startNewGame = () => {\n\t\tdispatch(setGamePlay(false));\n\t\tdispatch(setDidWin(false));\n\t\tdispatch(setResultOut(false));\n\t\tsocket.emit('restart');\n\t\tdispatch(setOpponentPickedMessage(''));\n\t};\n\n\treturn (\n\t\t<GamePlayContainer>\n\t\t\t<PlayerContainer spaceBetween={resultOut}>\n\t\t\t\t<Icon key={11} title={playerChoice} image={image} won={didWin} customSize={true} />\n\n\t\t\t\t{!resultOut ? (\n\t\t\t\t\t<SecondPlayer className='empty' large={true}></SecondPlayer>\n\t\t\t\t) : (\n\t\t\t\t\t<Icon key={22} title={opponent} image={opponentImage} customSize={true} />\n\t\t\t\t)}\n\t\t\t</PlayerContainer>\n\n\t\t\t<PlayerIdentity>\n\t\t\t\t<p>you picked</p>\n\t\t\t\t<p>an opposer picked</p>\n\t\t\t</PlayerIdentity>\n\n\t\t\t{resultOut && (\n\t\t\t\t<GameResultContainer>\n\t\t\t\t\t<p>{winnerText}</p>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype={'button'}\n\t\t\t\t\t\tbtnStyle={'play again'}\n\t\t\t\t\t\tchildren={'play again'}\n\t\t\t\t\t\thandler={startNewGame}\n\t\t\t\t\t/>\n\t\t\t\t</GameResultContainer>\n\t\t\t)}\n\t\t</GamePlayContainer>\n\t);\n};\n\nexport default OnlineGamePlay;\n","import { useEffect, useState } from 'react';\nimport useSound from 'use-sound';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport icons from '../../data';\nimport { socket } from './room.component';\n\nimport iconClick from '../../sounds/game-click.mp3';\n\nimport Icon from '../../components/icon/icon.component';\nimport OnlineGamePlay from './game-play.component';\n\nimport {\n    setOpponent,\n    setGamePlay,\n    setPlayerChoice,\n} from '../../redux/players/online-players.slice';\n\nimport { GameBodyContainer } from '../../styles/game-body.styles';\n\nconst OnlineGameBody = (): JSX.Element => {\n    const [play] = useSound(iconClick, { volume: 0.25 });\n    const { playerOneActive, gamePlay } = useAppSelector(state => state.onlinePlayers);\n    const { room } = useAppSelector(state => state.socket);\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        socket.on('p1Choice', ({ choice }) => {\n            !playerOneActive && dispatch(setOpponent(choice));\n        });\n\n        socket.on('p2Choice', ({ choice }) => {\n            playerOneActive && dispatch(setOpponent(choice));\n        });\n\n        return () => {\n            socket.off('p1Choice');\n            socket.off('p2Choice');\n        };\n    }, []);\n\n    const iconClickHandler = (e: any) => {\n        dispatch(setGamePlay(!gamePlay));\n        const choice = e.target.closest('#icon-wrapper').value;\n        dispatch(setPlayerChoice(choice));\n        play();\n\n        const choiceEvent = playerOneActive ? 'p1Choice' : 'p2Choice';\n        socket.emit(choiceEvent, { choice, room: room });\n        socket.emit('game-play');\n    };\n\n    return gamePlay ? (\n        <OnlineGamePlay />\n    ) : (\n        <div>\n            <GameBodyContainer>\n                {icons.map(({ id, title, image }) => (\n                    <Icon key={id} iconId={id} title={title} image={image} handler={iconClickHandler} />\n                ))}\n            </GameBodyContainer>\n        </div>\n    );\n};\n\nexport default OnlineGameBody;\n","import styled from 'styled-components';\n\nexport const GameStatusContainer = styled.div`\n\tp {\n\t\ttext-transform: uppercase;\n\t\tcolor: hsl(0, 11%, 89%);\n\t\tletter-spacing: 1px;\n\t\ttext-align: center;\n\n\t\t// Animation\n\t\tanimation-name: flash;\n\t\tanimation-duration: 1s;\n\t\tanimation-fill-mode: backwards;\n\n\t\t@-webkit-keyframes flash {\n\t\t\tfrom,\n\t\t\t50%,\n\t\t\tto {\n\t\t\t\topacity: 1;\n\t\t\t}\n\n\t\t\t25%,\n\t\t\t75% {\n\t\t\t\topacity: 0;\n\t\t\t}\n\t\t}\n\n\t\t@keyframes flash {\n\t\t\tfrom,\n\t\t\t50%,\n\t\t\tto {\n\t\t\t\topacity: 1;\n\t\t\t}\n\n\t\t\t25%,\n\t\t\t75% {\n\t\t\t\topacity: 0;\n\t\t\t}\n\t\t}\n\t}\n`;\n","import { useEffect, useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\n\nimport { socket } from './room.component';\n\nimport {\n\tsetOpponentPickedMessage,\n\tsetOpponentRestartedMessage,\n} from '../../redux/status/opponent-status.slice';\n\nimport { GameStatusContainer } from './game-status.styles';\n\nconst GameStatus = (): JSX.Element => {\n\tconst { resultOut } = useAppSelector(state => state.onlineScorer);\n\tconst { gamePlay } = useAppSelector(state => state.onlinePlayers);\n\tconst { opponentPickedMessage, opponentRestartedMessage } = useAppSelector(\n\t\tstate => state.opponentStatus\n\t);\n\n\tconst [leftMessage, setLeftMessage] = useState('');\n\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tsocket.on('status', message => {\n\t\t\tdispatch(setOpponentPickedMessage(message));\n\t\t});\n\n\t\tsocket.on('connected', () => {\n\t\t\tsetLeftMessage('opponent reconnected!');\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetLeftMessage('');\n\t\t\t}, 1000);\n\t\t});\n\n\t\tsocket.on('disconnected', message => {\n\t\t\tsetLeftMessage(message);\n\t\t\tdispatch(setOpponentPickedMessage(''));\n\t\t\tdispatch(setOpponentRestartedMessage(''));\n\t\t});\n\n\t\tdispatch(setOpponentRestartedMessage(''));\n\n\t\treturn () => {\n\t\t\tsocket.off('status');\n\t\t\tsocket.off('connected');\n\t\t\tsocket.off('disconnected');\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<GameStatusContainer>\n\t\t\t{!resultOut && <p>{opponentPickedMessage}</p>}\n\t\t\t{gamePlay && resultOut && <p>{opponentRestartedMessage}</p>}\n\t\t\t<p>{leftMessage}</p>\n\t\t</GameStatusContainer>\n\t);\n};\n\nexport default GameStatus;\n","import { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport GameInfo from '../../components/game-info/game-info.component';\nimport OnlineGameBody from './game-body.component';\nimport GameRulesImage from '../../components/game-rules/game-rules.component';\nimport GameRulesBtn from '../../components/game-rules-btn/game-rules-btn.component';\n\nimport { setShowRules } from '../../redux/rules/rules.slice';\n\nimport GameStatus from './game-status.component';\n\nconst OnlineGameStart = (): JSX.Element => {\n    const { score } = useAppSelector(state => state.onlineScorer);\n    const { showRules } = useAppSelector(state => state.rules);\n\n    const dispatch = useAppDispatch();\n\n    const rulesHandler = () => dispatch(setShowRules(!showRules));\n\n    return (\n        <div className='Game Game__Container'>\n            <GameInfo score={score} />\n            <OnlineGameBody />\n\n            <GameStatus />\n\n            {showRules ? (\n                <GameRulesImage closeHandler={rulesHandler} />\n            ) : (\n                <GameRulesBtn openHandler={rulesHandler} />\n            )}\n        </div>\n    );\n};\n\nexport default OnlineGameStart;\n","import styled from 'styled-components';\n\nexport const RoomContainer = styled.div`\n\twidth: min(80%, 420px);\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 4rem;\n\tmargin-block: 10rem;\n\n\tbutton {\n\t\twidth: 100%;\n\n\t\t// Animation\n\t\tanimation-name: fadeInUp;\n\t\tanimation-duration: 1s;\n\t\tanimation-delay: 0.8s;\n\t\tanimation-fill-mode: backwards;\n\t}\n\n\tp {\n\t\tfont-size: 1rem;\n\t\tcolor: hsl(217, 72%, 86%);\n\t\tletter-spacing: 1.5px;\n\t\ttext-transform: uppercase;\n\t\ttext-align: center;\n\n\t\t&.invalid-name {\n\t\t\tanimation-name: wobble;\n\t\t\tanimation-duration: 1s;\n\t\t\tanimation-fill-mode: backwards;\n\t\t}\n\t}\n\n\t@keyframes wobble {\n\t\tfrom {\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\n\t\t15% {\n\t\t\ttransform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg);\n\t\t}\n\n\t\t30% {\n\t\t\ttransform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg);\n\t\t}\n\n\t\t45% {\n\t\t\ttransform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg);\n\t\t}\n\n\t\t60% {\n\t\t\ttransform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg);\n\t\t}\n\n\t\t75% {\n\t\t\ttransform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg);\n\t\t}\n\n\t\tto {\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\t}\n\n\t@-webkit-keyframes fadeInUp {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(0, 100%, 0);\n\t\t}\n\n\t\tto {\n\t\t\topacity: 1;\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\t}\n\n\t@keyframes fadeInUp {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(0, 100%, 0);\n\t\t}\n\n\t\tto {\n\t\t\topacity: 1;\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\t}\n`;\n\nexport const FormInput = styled.input`\n\twidth: 100%;\n\tfont-size: 1.1rem;\n\tcolor: hsl(217, 72%, 86%);\n\tfont-weight: 700;\n\tletter-spacing: 2px;\n\ttext-transform: uppercase;\n\tbackground-color: transparent;\n\toutline: 3px solid transparent;\n\tborder: 2px solid white;\n\tborder-radius: 10px;\n\tpadding: 0.8rem;\n\tmargin-block-end: 1rem;\n\n\t::placeholder {\n\t\tfont-size: 0.8rem;\n\t}\n\n\t// Animation\n\tanimation-name: fadeInDown;\n\tanimation-duration: 1s;\n\tanimation-fill-mode: backwards;\n\n\t@-webkit-keyframes fadeInDown {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(0, -100%, 0);\n\t\t}\n\n\t\tto {\n\t\t\topacity: 1;\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\t}\n\n\t@keyframes fadeInDown {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t\ttransform: translate3d(0, -100%, 0);\n\t\t}\n\n\t\tto {\n\t\t\topacity: 1;\n\t\t\ttransform: translate3d(0, 0, 0);\n\t\t}\n\t}\n`;\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport { io } from 'socket.io-client';\n\nimport OnlineGameStart from './game-start.component';\nimport Button from '../../components/button/button.component';\n\nimport { setSockets, setRoom } from '../../redux/socket/socket.slice';\nimport { setPlayerOneActive, setIsPlaying } from '../../redux/players/online-players.slice';\n\nimport { FormInput, RoomContainer } from './room.styles';\n\nexport const socket = io(\n    process.env.NODE_ENV === 'production'\n        ? `${process.env.REACT_APP_SERVER_URL}`\n        : 'http://localhost:4000'\n);\n\nconst Room = (): JSX.Element => {\n    const { room, sockets } = useAppSelector(state => state.socket);\n    const { isPlaying } = useAppSelector(state => state.onlinePlayers);\n\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            // console.log('You connected to ', socket.id);\n        });\n\n        socket.on('updated-users', users => {\n            // console.log(users);\n            dispatch(setSockets(users));\n        });\n\n        socket.on('full', message => {\n            setSuccessMessage(message);\n        });\n\n        sockets.length === 2 && dispatch(setIsPlaying(true));\n\n        return () => {\n            socket.off('connect');\n            socket.off('updated-users');\n            socket.off('start');\n        };\n    }, [sockets, dispatch]);\n\n    const handleChangeRoom = (e: any) => {\n        dispatch(setRoom(e.target.value.trim()));\n    };\n\n    const handleCreateRoom = (e: any) => {\n        e.preventDefault();\n        dispatch(setPlayerOneActive(true));\n        room &&\n            socket.emit('join-room', room) &&\n            setSuccessMessage(`You created room ${room} & joined`);\n    };\n\n    const handleJoinRoom = (e: any) => {\n        e.preventDefault();\n        room && socket.emit('join-room', room);\n    };\n\n    return (\n        <>\n            {isPlaying ? (\n                <OnlineGameStart />\n            ) : (\n                <RoomContainer>\n                    <form onSubmit={handleCreateRoom}>\n                        <FormInput\n                            type='text'\n                            onChange={handleChangeRoom}\n                            aria-label='join-room'\n                            placeholder='type room code'\n                        />\n                        <br />\n                        <Button type='submit' btnStyle='primary' children='create room' />\n                    </form>\n\n                    <form onSubmit={handleJoinRoom}>\n                        <FormInput\n                            type='text'\n                            onChange={handleChangeRoom}\n                            aria-label='join-room'\n                            placeholder='type room code'\n                        />\n                        <br />\n                        <Button type='submit' btnStyle='primary' children='join room' />\n                    </form>\n\n                    {<p>{successMessage}</p>}\n                    {successMessage && !successMessage.includes('two players') && (\n                        <p>Wait for an opponent to join</p>\n                    )}\n                </RoomContainer>\n            )}\n        </>\n    );\n};\n\nexport default Room;\n"],"names":["_useAppSelector","useAppSelector","state","onlinePlayers","playerOneActive","playerChoice","opponent","_useAppSelector2","onlineScorer","resultOut","winnerText","didWin","dispatch","useAppDispatch","_icons$filter","icons","_ref","title","firstPlayerData","_slicedToArray","image","_icons$filter3","_ref2","secondPlayerData","opponentImage","useEffect","socket","on","data","setResultOut","winner","setWinnerText","increment","setDidWin","decrement","setOpponentRestartedMessage","message","off","_jsxs","GamePlayContainer","children","PlayerContainer","spaceBetween","_jsx","Icon","won","customSize","SecondPlayer","className","large","PlayerIdentity","GameResultContainer","Button","type","btnStyle","handler","setGamePlay","emit","setOpponentPickedMessage","_useSound","useSound","iconClick","volume","play","gamePlay","room","choice","setOpponent","iconClickHandler","e","target","closest","value","setPlayerChoice","choiceEvent","OnlineGamePlay","GameBodyContainer","_ref3","id","iconId","GameStatusContainer","styled","_templateObject","_taggedTemplateLiteral","_useAppSelector3","opponentStatus","opponentPickedMessage","opponentRestartedMessage","_useState","useState","_useState2","leftMessage","setLeftMessage","setTimeout","score","showRules","rules","rulesHandler","setShowRules","GameInfo","OnlineGameBody","GameStatus","GameRulesImage","closeHandler","GameRulesBtn","openHandler","RoomContainer","FormInput","_templateObject2","io","concat","process","REACT_APP_SERVER_URL","sockets","isPlaying","successMessage","setSuccessMessage","users","setSockets","length","setIsPlaying","handleChangeRoom","setRoom","trim","_Fragment","OnlineGameStart","onSubmit","preventDefault","setPlayerOneActive","onChange","placeholder","includes"],"sourceRoot":""}