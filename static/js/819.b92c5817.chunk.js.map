{"version":3,"file":"static/js/819.b92c5817.chunk.js","mappings":"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","sources":["routes/offline/game-result.component.tsx","utils/winner.ts","routes/offline/game-play.component.tsx","routes/offline/game-body.component.tsx","routes/offline/game-start.component.tsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport { increment, decrement, updateWinner } from '../../redux/score/scorer.slice';\nimport { setIsNewGameStart } from '../../redux/players/players.slice';\n\nimport { winner } from '../../utils/winner';\nimport Button from '../../components/button/button.component';\n\nimport { GameResultContainer } from '../../styles/game-result.styles';\n\nconst GameResult = (): JSX.Element => {\n\tconst { isNewGameStart, compChose, firstPlayerTitle, compChoiceTitle } = useAppSelector(\n\t\tstate => state.players\n\t);\n\tconst [winnerText, setWinnerText] = useState<string>('');\n\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tconst winnerRes = winner(firstPlayerTitle, compChoiceTitle);\n\n\t\twinnerRes === firstPlayerTitle && setWinnerText('you win');\n\t\twinnerRes === compChoiceTitle && setWinnerText('you loss');\n\t\twinnerRes === 'draw' && setWinnerText('draw');\n\t}, [compChose]);\n\n\tuseEffect(() => {\n\t\twinnerText === 'you win'\n\t\t\t? dispatch(updateWinner('you'))\n\t\t\t: winnerText === 'you loss'\n\t\t\t? dispatch(updateWinner('opponent'))\n\t\t\t: dispatch(updateWinner('draw'));\n\n\t\twinnerText === 'you win' && dispatch(increment());\n\t\twinnerText === 'you loss' && dispatch(decrement());\n\t}, [winnerText]);\n\n\tconst startNewGameHandler = () => {\n\t\tdispatch(setIsNewGameStart(!isNewGameStart));\n\t};\n\n\treturn (\n\t\t<GameResultContainer>\n\t\t\t<p>{winnerText}</p>\n\n\t\t\t<Button\n\t\t\t\ttype={'button'}\n\t\t\t\tbtnStyle='play again'\n\t\t\t\tchildren={'Play Again'}\n\t\t\t\thandler={startNewGameHandler}\n\t\t\t/>\n\t\t</GameResultContainer>\n\t);\n};\n\nexport default GameResult;\n","export const winner = (player1: string, player2: string): string | undefined => {\n\tlet winner: string = '';\n\n\tif (player1 === 'scissors') {\n\t\tif (player2 === 'scissors') winner = 'draw';\n\t\telse if (player2 === 'paper' || player2 === 'lizard') winner = player1;\n\t\telse winner = player2;\n\t} else if (player1 === 'paper') {\n\t\tif (player2 === 'paper') winner = 'draw';\n\t\telse if (player2 === 'rock' || player2 === 'spock') winner = player1;\n\t\telse winner = player2;\n\t} else if (player1 === 'rock') {\n\t\tif (player2 === 'rock') winner = 'draw';\n\t\telse if (player2 === 'lizard' || player2 === 'scissors') winner = player1;\n\t\telse winner = player2;\n\t} else if (player1 === 'lizard') {\n\t\tif (player2 === 'lizard') winner = 'draw';\n\t\telse if (player2 === 'spock' || player2 === 'paper') winner = player1;\n\t\telse winner = player2;\n\t} else if (player1 === 'spock') {\n\t\tif (player2 === 'spock') winner = 'draw';\n\t\telse if (player2 === 'scissors' || player2 === 'rock') winner = player1;\n\t\telse winner = player2;\n\t} else winner = 'draw';\n\n\treturn winner;\n};\n","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport icons from '../../data';\n\nimport Icon from '../../components/icon/icon.component';\nimport GameResult from './game-result.component';\n\nimport { setCompChose, setCompChoiceTitle } from '../../redux/players/players.slice';\n\nimport {\n\tGamePlayContainer,\n\tPlayerContainer,\n\tPlayerIdentity,\n\tSecondPlayer,\n} from '../../styles/game-play.styles';\n\nconst GamePlay = (): JSX.Element => {\n\tconst { firstPlayerTitle, compChose, compChoiceTitle } = useAppSelector(state => state.players);\n\tconst { winner } = useAppSelector(state => state.scorer);\n\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tconst id = setTimeout(() => {\n\t\t\tconst randVal = 1 + Math.floor(Math.random() * 5);\n\t\t\tconst [matchedData] = icons.filter(({ id }) => id === randVal);\n\n\t\t\tdispatch(setCompChoiceTitle(matchedData.title));\n\t\t\tdispatch(setCompChose(!compChose));\n\t\t}, 1000);\n\n\t\treturn () => {\n\t\t\tclearTimeout(id);\n\t\t};\n\t}, []);\n\n\tconst [firstPlayerData] = icons.filter(({ title }) => title === firstPlayerTitle);\n\tconst firstPlayerIcon = firstPlayerData?.image;\n\n\tconst [compData] = icons.filter(({ title }) => title === compChoiceTitle);\n\tconst compChoiceIcon = compData?.image;\n\n\treturn (\n\t\t<GamePlayContainer>\n\t\t\t<PlayerContainer spaceBetween={compChose}>\n\t\t\t\t<Icon\n\t\t\t\t\tkey={11}\n\t\t\t\t\ttitle={firstPlayerTitle}\n\t\t\t\t\timage={firstPlayerIcon}\n\t\t\t\t\tcustomSize={true}\n\t\t\t\t\twon={winner === 'you'}\n\t\t\t\t/>\n\n\t\t\t\t{compChose ? (\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tkey={22}\n\t\t\t\t\t\ttitle={compChoiceTitle}\n\t\t\t\t\t\timage={compChoiceIcon}\n\t\t\t\t\t\tcustomSize={true}\n\t\t\t\t\t\twon={winner === 'opponent'}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<SecondPlayer className='empty' large={true}></SecondPlayer>\n\t\t\t\t)}\n\t\t\t</PlayerContainer>\n\n\t\t\t<PlayerIdentity>\n\t\t\t\t<p>you picked</p>\n\t\t\t\t<p>the house picked</p>\n\t\t\t</PlayerIdentity>\n\n\t\t\t{compChose && <GameResult />}\n\t\t</GamePlayContainer>\n\t);\n};\n\nexport default GamePlay;\n","import useSound from 'use-sound';\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\n\nimport icons from '../../data';\nimport iconClick from '../../sounds/game-click.mp3';\n\nimport GamePlay from './game-play.component';\nimport Icon from '../../components/icon/icon.component';\n\nimport { GameBodyContainer } from '../../styles/game-body.styles';\n\nimport {\n\tsetFirstPlayerChose,\n\tsetFirstPlayerTitle,\n\tsetCompChose,\n\tsetIsNewGameStart,\n} from '../../redux/players/players.slice';\n\nconst GameBody = (): JSX.Element => {\n\tconst [play] = useSound(iconClick, { volume: 0.25 });\n\n\tconst { firstPlayerChose, isNewGameStart } = useAppSelector(state => state.players);\n\tconst dispatch = useAppDispatch();\n\n\tconst iconClickHandler = (e: any) => {\n\t\tdispatch(setFirstPlayerChose(true));\n\t\tdispatch(setFirstPlayerTitle(e.target.closest('#icon-wrapper').value));\n\t\tdispatch(setIsNewGameStart(!isNewGameStart));\n\t\tdispatch(setCompChose(false));\n\t\tplay();\n\t};\n\n\treturn firstPlayerChose && isNewGameStart ? (\n\t\t<GamePlay />\n\t) : (\n\t\t<GameBodyContainer>\n\t\t\t{icons.map(({ id, title, image }) => (\n\t\t\t\t<Icon key={id} iconId={id} title={title} image={image} handler={iconClickHandler} />\n\t\t\t))}\n\t\t</GameBodyContainer>\n\t);\n};\n\nexport default GameBody;\n","import { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport GameInfo from '../../components/game-info/game-info.component';\nimport GameBody from './game-body.component';\nimport GameRulesImage from '../../components/game-rules/game-rules.component';\nimport GameRulesBtn from '../../components/game-rules-btn/game-rules-btn.component';\n\nimport { setShowRules } from '../../redux/rules/rules.slice';\n\nconst GameStart = (): JSX.Element => {\n\tconst { score } = useAppSelector(state => state.scorer);\n\tconst { showRules } = useAppSelector(state => state.rules);\n\n\tconst dispatch = useAppDispatch();\n\n\tconst rulesHandler = () => dispatch(setShowRules(!showRules));\n\n\treturn (\n\t\t<div className='Game Game__Container'>\n\t\t\t<GameInfo score={score} />\n\t\t\t<GameBody />\n\n\t\t\t{showRules ? (\n\t\t\t\t<GameRulesImage closeHandler={rulesHandler} />\n\t\t\t) : (\n\t\t\t\t<GameRulesBtn openHandler={rulesHandler} />\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default GameStart;\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["_useAppSelector","useAppSelector","state","players","isNewGameStart","compChose","firstPlayerTitle","compChoiceTitle","_useState","useState","_useState2","_slicedToArray","winnerText","setWinnerText","dispatch","useAppDispatch","useEffect","winnerRes","player1","player2","winner","updateWinner","increment","decrement","_jsxs","GameResultContainer","children","_jsx","Button","type","btnStyle","handler","setIsNewGameStart","scorer","id","setTimeout","randVal","Math","floor","random","_icons$filter","icons","_ref","matchedData","setCompChoiceTitle","title","setCompChose","clearTimeout","_icons$filter3","_ref2","firstPlayerData","firstPlayerIcon","image","_icons$filter5","_ref3","compData","compChoiceIcon","GamePlayContainer","PlayerContainer","spaceBetween","Icon","customSize","won","SecondPlayer","className","large","PlayerIdentity","GameResult","_useSound","useSound","iconClick","volume","play","firstPlayerChose","iconClickHandler","e","setFirstPlayerChose","setFirstPlayerTitle","target","closest","value","GamePlay","GameBodyContainer","iconId","score","showRules","rules","rulesHandler","setShowRules","GameInfo","GameBody","GameRulesImage","closeHandler","GameRulesBtn","openHandler","src","callback","_ref2$volume","playbackRate","_ref2$playbackRate","soundEnabled","_ref2$soundEnabled","interrupt","_ref2$interrupt","onload","delegated","_objectWithoutPropertiesLoose","HowlConstructor","React__default","isMounted","duration","_React$useState","setDuration","sound","_React$useState2","setSound","handleLoad","call","this","current","then","mod","_mod$Howl","Howl","_extends","Array","isArray","rate","JSON","stringify","options","forceSoundEnabled","stop","pause"],"sourceRoot":""}